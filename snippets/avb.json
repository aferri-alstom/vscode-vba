{
    // Variables
    "Boolean": {
        "prefix": "bool",
        "body": [
            "dim ${1:bool_var_name} as boolean\n$0"
        ],
        "description": "Insert a boolean variable"
    },
    "PrivateBoolean": {
        "prefix": "pbool",
        "body": [
            "private ${1:bool_var_name} as boolean\n$0"
        ],
        "description": "Insert a private boolean variable"
    },
    "PublicBoolean": {
        "prefix": "pubool",
        "body": [
            "public ${1:bool_var_name} as boolean\n$0"
        ],
        "description": "Insert a public boolean variable"
    },
    "AssignBoolean": {
        "prefix": "abool",
        "body": [
            "dim ${1:bool_var_name} as boolean: ${1:bool_var_name} = ${2:value}\n$0"
        ],
        "description": "Insert a boolean variable with inline assignment"
    },
    "Integer": {
        "prefix": "int",
        "body": [
            "dim ${1:int_var_name} as integer\n$0"
        ],
        "description": "Insert an integer variable"
    },
    "PrivateInteger": {
        "prefix": "pint",
        "body": [
            "private ${1:int_var_name} as integer\n$0"
        ],
        "description": "Insert a private integer variable"
    },
    "PublicInteger": {
        "prefix": "puint",
        "body": [
            "public ${1:int_var_name} as integer\n$0"
        ],
        "description": "Insert a public integer variable"
    },
    "AssignInteger": {
        "prefix": "aint",
        "body": [
            "dim ${1:int_var_name} as integer: ${1:int_var_name} = ${2:value}\n$0"
        ],
        "description": "Insert an integer variable with inline assignment"
    },
    "String": {
        "prefix": "string",
        "body": [
            "dim ${1:int_var_name} as string\n$0"
        ],
        "description": "Insert a string variable"
    },
    "PrivateString": {
        "prefix": "pstring",
        "body": [
            "private ${1:int_var_name} as string\n$0"
        ],
        "description": "Insert a private string variable"
    },
    "PublicString": {
        "prefix": "pustring",
        "body": [
            "public ${1:int_var_name} as string\n$0"
        ],
        "description": "Insert a public string variable"
    },
    "AssignString": {
        "prefix": "astring",
        "body": [
            "dim ${1:int_var_name} as string: ${1:int_var_name} = ${2:value}\n$0"
        ],
        "description": "Insert a string variable with inline assignment"
    },
    "Type": {
        "prefix": "type",
        "body": [
            "dim ${1:var_name} as ${2:type}\n$0"
        ],
        "description": "Insert a variable"
    },
    "PrivateType": {
        "prefix": "ptype",
        "body": [
            "private ${1:var_name} as ${2:type}\n$0"
        ],
        "description": "Insert a private variable"
    },
    "PublicType": {
        "prefix": "putype",
        "body": [
            "public ${1:var_name} as ${2:type}\n$0"
        ],
        "description": "Insert a public variable"
    },
    "AssignType": {
        "prefix": "atype",
        "body": [
            "dim ${1:var_name} as ${2:type}: ${1:var_name} = ${3:value}\n$0"
        ],
        "description": "Insert a variable with inline assignment"
    },
    // Variables end

    // Functions
    "Subroutine": {
        "prefix": "sub",
        "body": [
            "private sub ${1:subroutine_name}()",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a private subroutine"
    },
    "SubroutineCatch": {
        "prefix": "sube",
        "body": [
            "private sub ${1:subroutine_name}()",
            "\ton error goto ErrorHandler\n",
            "\t$2\n",
            "\ton error goto 0",
            "\texit sub",
            "ErrorHandler:",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a private subroutine with a try-catch inside"
    },
    "PublicSubroutine": {
        "prefix": "psub",
        "body": [
            "public sub ${1:subroutine_name}()",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a public subroutine"
    },
    "PublicSubroutineCatch": {
        "prefix": "psube",
        "body": [
            "public sub ${1:subroutine_name}()",
            "\ton error goto ErrorHandler\n",
            "\t$2\n",
            "\ton error goto 0",
            "\texit sub",
            "ErrorHandler:",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a public subroutine with a try-catch inside"
    },
    "Function": {
        "prefix": "func",
        "body": [
            "private function ${1:function_name}() as ${2:return_type}",
            "\t$0",
            "\t${1:function_name} = ${3:value}",
            "end function"
        ],
        "description": "Creates a private function"
    },
    "FunctionCatch": {
        "prefix": "funce",
        "body": [
            "private function ${1:function_name}() as ${2:return_type}",
            "\ton error goto ErrorHandler\n",
            "\t$4\n",
            "\t${1:function_name} = ${3:value}",
            "\ton error goto 0",
            "\texit sub",
            "ErrorHandler:",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a private subroutine with a try-catch inside"
    },
    "PublicFunction": {
        "prefix": "pfunc",
        "body": [
            "public function ${1:function_name}() as ${2:return_type}",
            "\t$0",
            "\t${1:function_name} = ${3:value}",
            "end function"
        ],
        "description": "Creates a public function"
    },
    "PublicFunctionCatch": {
        "prefix": "pfunce",
        "body": [
            "public function ${1:function_name}() as ${2:return_type}",
            "\ton error goto ErrorHandler\n",
            "\t$4\n",
            "\t${1:function_name} = ${3:value}",
            "\ton error goto 0",
            "\texit sub",
            "ErrorHandler:",
            "\t$0",
            "end sub"
        ],
        "description": "Creates a public function with a try-catch inside"
    },
    // Functions end

    // Utilities
    "Header": {
        "prefix": "header",
        "body": [
            "$LINE_COMMENT",
            "$LINE_COMMENT $TM_FILENAME",
            "$LINE_COMMENT ${TM_DIRECTORY/.*\\\\(.*)\\\\(.*)$/$1\\/$2/}",
            "$LINE_COMMENT",
            "$LINE_COMMENT Created by ${1:author} on ${2:$CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR}.",
            "$LINE_COMMENT Modified by ${3:contributor} on $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR.",
            "$LINE_COMMENT Copyright Â© ${4:company} spa 2019. All rights reserved.",
            "$LINE_COMMENT\n\n\n$0"
        ],
        "description": "Log variable value to console"
    },
    "Explicit": {
        "prefix": "exp",
        "body": [
            "option explicit\n$0"
        ],
        "description": "Adds option explicit"
    },
    "Print": {
        "prefix": "print",
        "body": [
            "Debug.Print ${1:var_name}"
        ],
        "description": "Log variable value to console"
    },
    "PrintString": {
        "prefix": "prints",
        "body": [
            "Debug.Print \"$1\""
        ],
        "description": "Log string to console"
    }
    // Utilities end
}